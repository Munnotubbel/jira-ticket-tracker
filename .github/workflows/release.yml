name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

# Add permissions configuration
permissions:
  contents: write      # Für Push und Release-Erstellung
  actions: read       # Für Artifact-Download
  packages: write     # Falls du später Packages veröffentlichen möchtest

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config \
            libx11-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev \
            rpm pulseaudio-utils alsa-utils libasound2-dev \
            gcc make

      - name: Setup RPM build environment
        run: |
          # Create RPM build directories
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          mkdir -p .rpm

          # Copy spec file directly from repository
          cp .rpm/ticket-tracker.spec ~/rpmbuild/SPECS/
          
      - name: Build Binary and Packages
        run: |
          cargo build --release
          make build-linux
          
      - name: Prepare Release Directory
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f 2)
          mkdir -p releases/linux
          cp target/release/ticket-tracker releases/linux/
          cp ~/rpmbuild/RPMS/x86_64/ticket-tracker-${VERSION}-*.rpm releases/linux/ || true
          cp target/debian/ticket-tracker_${VERSION}*.deb releases/linux/ || true
          
      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-release
          path: releases/linux/

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-gnu
          
      - name: Build Windows Release
        run: |
          make clean-windows
          make build-windows
          
      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: releases/windows/

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          targets: |
            x86_64-apple-darwin
            aarch64-apple-darwin
          
      - name: Build macOS Release
        run: |
          make clean-macos
          make build-macos
          
      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: releases/macos/

  create-release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            linux-release/**/*
            windows-release/**/*
            macos-release/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-release-branch:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Vollständige Git-Historie
          
      - name: Create releases branch if not exists
        run: |
          if ! git ls-remote --heads origin releases | grep releases > /dev/null; then
            git checkout --orphan releases
            git rm -rf .
            git commit --allow-empty -m "Initial releases branch"
            git push origin releases
          fi
          git checkout releases || git checkout -b releases origin/releases

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        
      - name: Update Release Files
        run: |
          rm -rf releases/
          mkdir -p releases/
          cp -r linux-release/* releases/
          cp -r windows-release/* releases/
          cp -r macos-release/* releases/
          
      - name: Commit and Push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add releases/
          git commit -m "Update releases from main branch" || echo "No changes to commit"
          git push origin releases 