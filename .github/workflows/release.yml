name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

# Add permissions configuration
permissions:
  contents: write      # For push and release creation
  actions: read       # For artifact download
  packages: write     # For future package publishing

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config \
            libx11-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev \
            rpm pulseaudio-utils alsa-utils libasound2-dev \
            gcc make

      - name: Setup RPM build environment
        run: |
          # Create RPM build directories
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          mkdir -p .rpm

          # Copy spec file directly from repository
          cp .rpm/ticket-tracker.spec ~/rpmbuild/SPECS/
          
      - name: Install cargo-deb
        run: cargo install cargo-deb
      
      - name: Build Binary and Packages
        run: |
          cargo build --release
          cargo deb
          make build-linux
          
      - name: Prepare Release Directory
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f 2)
          mkdir -p release-artifacts/linux
          cp target/release/ticket-tracker release-artifacts/linux/ticket-tracker-${VERSION}-linux
          cp ~/rpmbuild/RPMS/x86_64/ticket-tracker-${VERSION}-*.rpm release-artifacts/linux/ || true
          cp target/debian/ticket-tracker_${VERSION}*.deb release-artifacts/linux/ || true
          
      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-release
          path: release-artifacts/linux/
          if-no-files-found: error

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-gnu
          
      - name: Build Windows Release
        run: |
          cargo build --release --target x86_64-pc-windows-gnu
          
      - name: Prepare Release Directory
        run: |
          mkdir -p release-artifacts/windows
          cp target/x86_64-pc-windows-gnu/release/ticket-tracker.exe release-artifacts/windows/
          
      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: release-artifacts/windows/
          if-no-files-found: error

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-apple-darwin
          
      - name: Build macOS Release
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f 2)
          cargo build --release
          mkdir -p release-artifacts/macos
          cp target/release/ticket-tracker release-artifacts/macos/ticket-tracker-${VERSION}-macos
          
      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: release-artifacts/macos/
          if-no-files-found: error

  create-release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          
      - name: Display structure
        run: ls -R release-artifacts/
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
          body_path: .github/RELEASE_TEMPLATE.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 